"use strict";

exports.__esModule = true;
exports.default = preset;

var _GenerateClassNames = _interopRequireDefault(require("../visitors/GenerateClassNames"));

var _DetectStyledImportName = _interopRequireDefault(require("../visitors/DetectStyledImportName"));

var _JSXElement = _interopRequireDefault(require("./visitors/JSXElement"));

var _ProcessStyled = _interopRequireDefault(require("./visitors/ProcessStyled"));

var _ProcessCSS = _interopRequireDefault(require("./visitors/ProcessCSS"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file is a babel preset used to transform files inside evaluators.
 * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.
 */
function preeval(babel, options) {
  return {
    visitor: {
      Program: {
        enter(path, state) {
          // Collect all the style rules from the styles we encounter
          state.queue = [];
          state.rules = {};
          state.index = -1;
          state.dependencies = [];
          state.replacements = []; // We need our transforms to run before anything else
          // So we traverse here instead of a in a visitor

          path.traverse({
            ImportDeclaration: p => (0, _DetectStyledImportName.default)(babel, p, state),
            TaggedTemplateExpression: p => (0, _GenerateClassNames.default)(babel, p, state, options),
            JSXElement: _JSXElement.default
          });
        }

      },
      CallExpression: _ProcessStyled.default,
      TaggedTemplateExpression: _ProcessCSS.default // TaggedTemplateExpression is processed before CallExpression

    }
  };
}

function preset(context, options) {
  return {
    plugins: [[preeval, options]]
  };
}
//# sourceMappingURL=preeval.js.map