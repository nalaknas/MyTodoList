/**
 * This file is used to extract statements required to evaluate dependencies.
 * Starting from the exports.__linariaPreval passed as argument to static method on class RequirementsResolver,
 * it recursively extracts paths that contains identifiers that are needed to evaluate the dependency.
 */
import type { Node, Statement } from '@babel/types';
import type { NodePath } from '@babel/traverse';
export default class RequirementsResolver {
    static resolve(path: NodePath<Node> | NodePath<Node>[]): Statement[];
    private requirements;
    /**
     * Checks that specified node or one of its ancestors is already added
     */
    private isAdded;
    /**
     * Makes a declaration statement, finds dependencies
     * and adds all of it to the list of requirements.
     */
    private resolveBinding;
    /**
     * Checks that a specified identifier has a binding and tries to resolve it
     * @return `Binding` or null if there is no binding, or it is already added, or it has useless type
     */
    private resolveIdentifier;
    /**
     * Finds all identifiers in a specified path, finds all related bindings
     * and recursively calls `resolve` for each of them.
     * @return `Set` with related bindings
     */
    private resolve;
    /**
     * Returns sorted list of required statements
     */
    private get statements();
}
