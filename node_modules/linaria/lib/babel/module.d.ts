import type { BabelFileResult } from '@babel/core';
import { debug } from './utils/logger';
import type { StrictOptions } from './types';
declare let cache: {
    [id: string]: Module;
};
declare class Module {
    static invalidate: () => void;
    static invalidateEvalCache: () => void;
    static _resolveFilename: (id: string, options: {
        id: string;
        filename: string;
        paths: string[];
    }) => string;
    static _nodeModulePaths: (filename: string) => string[];
    id: string;
    filename: string;
    options: StrictOptions;
    imports: Map<string, string[]> | null;
    paths: string[];
    exports: any;
    extensions: string[];
    dependencies: string[] | null;
    transform: ((text: string) => BabelFileResult | null) | null;
    debug: typeof debug;
    debuggerDepth: number;
    constructor(filename: string, options: StrictOptions, debuggerDepth?: number);
    resolve: (id: string) => string;
    require: {
        (id: string): any;
        resolve: (id: string) => string;
        ensure: () => void;
        cache: typeof cache;
    };
    evaluate(text: string, only?: string[] | null): void;
}
export default Module;
