{"version":3,"sources":["../src/loader.ts"],"names":["workspaceRoot","lernaConfig","searchPlaces","searchSync","lernaRoot","path","dirname","filepath","loader","content","inputSourceMap","resourcePath","EvalCache","clearForFile","sourceMap","undefined","cacheDirectory","preprocessor","extension","rest","loaderUtils","getOptions","root","process","cwd","baseOutputFileName","replace","outputFilename","join","isAbsolute","includes","relative","resolveOptions","extensions","resolveSync","enhancedResolve","create","sync","_compilation","options","resolve","alias","modules","result","originalResolveFilename","Module","_resolveFilename","id","filename","pluginOptions","cssText","Buffer","from","cssSourceMapText","toString","dependencies","length","forEach","dep","f","addDependency","e","console","warn","currentCssText","fs","readFileSync","mkdirp","writeFileSync","callback","code","stringifyRequest"],"mappings":"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","sourcesContent":["/**\n * This file contains a Webpack loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport normalize from 'normalize-path';\nimport loaderUtils from 'loader-utils';\nimport enhancedResolve from 'enhanced-resolve';\nimport findYarnWorkspaceRoot from 'find-yarn-workspace-root';\nimport type { RawSourceMap } from 'source-map';\nimport cosmiconfig from 'cosmiconfig';\nimport * as EvalCache from './babel/eval-cache';\nimport Module from './babel/module';\nimport { debug } from './babel/utils/logger';\nimport transform from './transform';\n\nconst workspaceRoot = findYarnWorkspaceRoot();\nconst lernaConfig = cosmiconfig('lerna', {\n  searchPlaces: ['lerna.json'],\n}).searchSync();\nconst lernaRoot =\n  lernaConfig !== null ? path.dirname(lernaConfig.filepath) : null;\n\ntype LoaderContext = Parameters<typeof loaderUtils.getOptions>[0];\n\nexport default function loader(\n  this: LoaderContext,\n  content: string,\n  inputSourceMap: RawSourceMap | null\n) {\n  debug('loader', this.resourcePath);\n\n  EvalCache.clearForFile(this.resourcePath);\n\n  const {\n    sourceMap = undefined,\n    cacheDirectory = '.linaria-cache',\n    preprocessor = undefined,\n    extension = '.linaria.css',\n    ...rest\n  } = loaderUtils.getOptions(this) || {};\n\n  const root = workspaceRoot || lernaRoot || process.cwd();\n\n  const baseOutputFileName = this.resourcePath.replace(/\\.[^.]+$/, extension);\n\n  const outputFilename = normalize(\n    path.join(\n      path.isAbsolute(cacheDirectory)\n        ? cacheDirectory\n        : path.join(process.cwd(), cacheDirectory),\n      this.resourcePath.includes(root)\n        ? path.relative(root, baseOutputFileName)\n        : baseOutputFileName\n    )\n  );\n\n  const resolveOptions = {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  };\n\n  const resolveSync = enhancedResolve.create.sync(\n    // this._compilation is a deprecated API\n    // However there seems to be no other way to access webpack's resolver\n    // There is this.resolve, but it's asynchronous\n    // Another option is to read the webpack.config.js, but it won't work for programmatic usage\n    // This API is used by many loaders/plugins, so hope we're safe for a while\n    this._compilation?.options.resolve\n      ? {\n          ...resolveOptions,\n          alias: this._compilation.options.resolve.alias,\n          modules: this._compilation.options.resolve.modules,\n        }\n      : resolveOptions\n  );\n\n  let result;\n\n  const originalResolveFilename = Module._resolveFilename;\n\n  try {\n    // Use webpack's resolution when evaluating modules\n    Module._resolveFilename = (id, { filename }) =>\n      resolveSync(path.dirname(filename), id);\n\n    result = transform(content, {\n      filename: path.relative(process.cwd(), this.resourcePath),\n      inputSourceMap: inputSourceMap ?? undefined,\n      outputFilename,\n      pluginOptions: rest,\n      preprocessor,\n    });\n  } finally {\n    // Restore original behaviour\n    Module._resolveFilename = originalResolveFilename;\n  }\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies?.length) {\n      result.dependencies.forEach((dep) => {\n        try {\n          const f = resolveSync(path.dirname(this.resourcePath), dep);\n\n          this.addDependency(f);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);\n        }\n      });\n    }\n\n    // Read the file first to compare the content\n    // Write the new content only if it's changed\n    // This will prevent unnecessary WDS reloads\n    let currentCssText;\n\n    try {\n      currentCssText = fs.readFileSync(outputFilename, 'utf-8');\n    } catch (e) {\n      // Ignore error\n    }\n\n    if (currentCssText !== cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n      fs.writeFileSync(outputFilename, cssText);\n    }\n\n    this.callback(\n      null,\n      `${result.code}\\n\\nrequire(${loaderUtils.stringifyRequest(\n        this,\n        outputFilename\n      )});`,\n      result.sourceMap ?? undefined\n    );\n    return;\n  }\n\n  this.callback(null, result.code, result.sourceMap ?? undefined);\n}\n"],"file":"loader.js"}