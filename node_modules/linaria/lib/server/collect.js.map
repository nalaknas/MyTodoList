{"version":3,"sources":["../../src/server/collect.ts"],"names":["collect","html","css","animations","Set","other","postcss","root","critical","stylesheet","parse","htmlClassesRegExp","extractClassesFromHtml","isCritical","rule","selector","startsWith","Boolean","match","handleAtRule","addedToCritical","each","childRule","append","clone","name","remove","walkAtRules","parent","type","walkedAtRules","walkRules","has","add","walkDecls","decl","value","split","params","toString","htmlClasses","regex","exec","forEach","className","replace","push","RegExp","join"],"mappings":";;;;;;;AAKA;;;;AALA;;;AAYe,SAASA,OAAT,CAAiBC,IAAjB,EAA+BC,GAA/B,EAA2D;AACxE,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;;AACA,QAAMC,KAAK,GAAGC,iBAAQC,IAAR,EAAd;;AACA,QAAMC,QAAQ,GAAGF,iBAAQC,IAAR,EAAjB;;AACA,QAAME,UAAU,GAAGH,iBAAQI,KAAR,CAAcR,GAAd,CAAnB;;AACA,QAAMS,iBAAiB,GAAGC,sBAAsB,CAACX,IAAD,CAAhD;;AAEA,QAAMY,UAAU,GAAIC,IAAD,IAAqB;AACtC;AACA,QAAI,cAAcA,IAAd,IAAsBA,IAAI,CAACC,QAAL,CAAcC,UAAd,CAAyB,GAAzB,CAA1B,EAAyD;AACvD,aAAOC,OAAO,CAACH,IAAI,CAACC,QAAL,CAAcG,KAAd,CAAoBP,iBAApB,CAAD,CAAd;AACD;;AAED,WAAO,IAAP;AACD,GAPD;;AASA,QAAMQ,YAAY,GAAIL,IAAD,IAAkB;AACrC,QAAIM,eAAe,GAAG,KAAtB;AAEAN,IAAAA,IAAI,CAACO,IAAL,CAAWC,SAAD,IAAe;AACvB,UAAIT,UAAU,CAACS,SAAD,CAAV,IAAyB,CAACF,eAA9B,EAA+C;AAC7CZ,QAAAA,QAAQ,CAACe,MAAT,CAAgBT,IAAI,CAACU,KAAL,EAAhB;AACAJ,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KALD;;AAOA,QAAIN,IAAI,CAACW,IAAL,KAAc,WAAlB,EAA+B;AAC7B;AACD;;AAED,QAAIL,eAAJ,EAAqB;AACnBN,MAAAA,IAAI,CAACY,MAAL;AACD,KAFD,MAEO;AACLrB,MAAAA,KAAK,CAACkB,MAAN,CAAaT,IAAb;AACD;AACF,GAnBD;;AAqBAL,EAAAA,UAAU,CAACkB,WAAX,CAAuB,WAAvB,EAAqCb,IAAD,IAAU;AAC5C;;;;AAIA,QAAIA,IAAI,CAACc,MAAL,CAAYC,IAAZ,KAAqB,MAAzB,EAAiC;AAC/BrB,MAAAA,QAAQ,CAACe,MAAT,CAAgBT,IAAhB;AACD;AACF,GARD;AAUA,QAAMgB,aAAa,GAAG,IAAI1B,GAAJ,EAAtB;AAEAK,EAAAA,UAAU,CAACsB,SAAX,CAAsBjB,IAAD,IAAU;AAC7B,QAAI,UAAUA,IAAI,CAACc,MAAf,IAAyBd,IAAI,CAACc,MAAL,CAAYH,IAAZ,KAAqB,WAAlD,EAA+D;AAC7D;AACD;;AAED,QAAIX,IAAI,CAACc,MAAL,CAAYC,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,UAAI,CAACC,aAAa,CAACE,GAAd,CAAkBlB,IAAI,CAACc,MAAvB,CAAL,EAAqC;AACnCT,QAAAA,YAAY,CAACL,IAAI,CAACc,MAAN,CAAZ;AACAE,QAAAA,aAAa,CAACG,GAAd,CAAkBnB,IAAI,CAACc,MAAvB;AACD;;AACD;AACD;;AAED,QAAIf,UAAU,CAACC,IAAD,CAAd,EAAsB;AACpBN,MAAAA,QAAQ,CAACe,MAAT,CAAgBT,IAAhB;AACD,KAFD,MAEO;AACLT,MAAAA,KAAK,CAACkB,MAAN,CAAaT,IAAb;AACD;AACF,GAlBD;AAoBAN,EAAAA,QAAQ,CAAC0B,SAAT,CAAmB,WAAnB,EAAiCC,IAAD,IAAU;AACxChC,IAAAA,UAAU,CAAC8B,GAAX,CAAeE,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAf;AACD,GAFD;AAIA5B,EAAAA,UAAU,CAACkB,WAAX,CAAuB,WAAvB,EAAqCb,IAAD,IAAU;AAC5C,QAAIX,UAAU,CAAC6B,GAAX,CAAelB,IAAI,CAACwB,MAApB,CAAJ,EAAiC;AAC/B9B,MAAAA,QAAQ,CAACe,MAAT,CAAgBT,IAAhB;AACD;AACF,GAJD;AAMA,SAAO;AACLN,IAAAA,QAAQ,EAAEA,QAAQ,CAAC+B,QAAT,EADL;AAELlC,IAAAA,KAAK,EAAEA,KAAK,CAACkC,QAAN;AAFF,GAAP;AAID;;AAED,MAAM3B,sBAAsB,GAAIX,IAAD,IAA0B;AACvD,QAAMuC,WAAqB,GAAG,EAA9B;AACA,QAAMC,KAAK,GAAG,sBAAd;AACA,MAAIvB,KAAK,GAAGuB,KAAK,CAACC,IAAN,CAAWzC,IAAX,CAAZ;;AAEA,SAAOiB,KAAK,KAAK,IAAjB,EAAuB;AACrBA,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,CAAe,GAAf,EAAoBM,OAApB,CAA6BC,SAAD,IAAe;AACzCA,MAAAA,SAAS,GAAGA,SAAS,CAACC,OAAV,CACV,4CADU,EAEV,MAFU,CAAZ;AAIAL,MAAAA,WAAW,CAACM,IAAZ,CAAiBF,SAAjB;AACD,KAND;AAOA1B,IAAAA,KAAK,GAAGuB,KAAK,CAACC,IAAN,CAAWzC,IAAX,CAAR;AACD;;AAED,SAAO,IAAI8C,MAAJ,CAAWP,WAAW,CAACQ,IAAZ,CAAiB,GAAjB,CAAX,EAAkC,IAAlC,CAAP;AACD,CAjBD","sourcesContent":["/**\n * This utility extracts critical CSS from given HTML and CSS file to be used in SSR environments\n */\n\nimport type { AtRule, ChildNode } from 'postcss';\nimport postcss from 'postcss';\n\ntype CollectResult = {\n  critical: string;\n  other: string;\n};\n\nexport default function collect(html: string, css: string): CollectResult {\n  const animations = new Set();\n  const other = postcss.root();\n  const critical = postcss.root();\n  const stylesheet = postcss.parse(css);\n  const htmlClassesRegExp = extractClassesFromHtml(html);\n\n  const isCritical = (rule: ChildNode) => {\n    // Only check class names selectors\n    if ('selector' in rule && rule.selector.startsWith('.')) {\n      return Boolean(rule.selector.match(htmlClassesRegExp));\n    }\n\n    return true;\n  };\n\n  const handleAtRule = (rule: AtRule) => {\n    let addedToCritical = false;\n\n    rule.each((childRule) => {\n      if (isCritical(childRule) && !addedToCritical) {\n        critical.append(rule.clone());\n        addedToCritical = true;\n      }\n    });\n\n    if (rule.name === 'keyframes') {\n      return;\n    }\n\n    if (addedToCritical) {\n      rule.remove();\n    } else {\n      other.append(rule);\n    }\n  };\n\n  stylesheet.walkAtRules('font-face', (rule) => {\n    /**\n     * @font-face rules may be defined also in CSS conditional groups (eg. @media)\n     * we want only handle those from top-level, rest will be handled in stylesheet.walkRules\n     */\n    if (rule.parent.type === 'root') {\n      critical.append(rule);\n    }\n  });\n\n  const walkedAtRules = new Set();\n\n  stylesheet.walkRules((rule) => {\n    if ('name' in rule.parent && rule.parent.name === 'keyframes') {\n      return;\n    }\n\n    if (rule.parent.type === 'atrule') {\n      if (!walkedAtRules.has(rule.parent)) {\n        handleAtRule(rule.parent);\n        walkedAtRules.add(rule.parent);\n      }\n      return;\n    }\n\n    if (isCritical(rule)) {\n      critical.append(rule);\n    } else {\n      other.append(rule);\n    }\n  });\n\n  critical.walkDecls(/animation/, (decl) => {\n    animations.add(decl.value.split(' ')[0]);\n  });\n\n  stylesheet.walkAtRules('keyframes', (rule) => {\n    if (animations.has(rule.params)) {\n      critical.append(rule);\n    }\n  });\n\n  return {\n    critical: critical.toString(),\n    other: other.toString(),\n  };\n}\n\nconst extractClassesFromHtml = (html: string): RegExp => {\n  const htmlClasses: string[] = [];\n  const regex = /\\s+class=\"([^\"]*)\"/gm;\n  let match = regex.exec(html);\n\n  while (match !== null) {\n    match[1].split(' ').forEach((className) => {\n      className = className.replace(\n        /\\\\|\\^|\\$|\\{|\\}|\\[|\\]|\\(|\\)|\\.|\\*|\\+|\\?|\\|/g,\n        '\\\\$&'\n      );\n      htmlClasses.push(className);\n    });\n    match = regex.exec(html);\n  }\n\n  return new RegExp(htmlClasses.join('|'), 'gm');\n};\n"],"file":"collect.js"}