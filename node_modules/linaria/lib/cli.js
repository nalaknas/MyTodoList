"use strict";

require("core-js/modules/es.string.replace");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _normalizePath = _interopRequireDefault(require("normalize-path"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _glob = _interopRequireDefault(require("glob"));

var _yargs = _interopRequireDefault(require("yargs"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file contains a CLI for Linaria.
 */
const {
  argv
} = _yargs.default.usage('Usage: $0 [options] <files ...>').option('config', {
  alias: 'c',
  type: 'string',
  description: 'Path to a config file',
  requiresArg: true
}).option('out-dir', {
  alias: 'o',
  type: 'string',
  description: 'Output directory for the extracted CSS files',
  demandOption: true,
  requiresArg: true
}).option('source-maps', {
  alias: 's',
  type: 'boolean',
  description: 'Generate source maps for the CSS files',
  default: false
}).option('source-root', {
  alias: 'r',
  type: 'string',
  description: 'Directory containing the source JS files',
  requiresArg: true
}).option('insert-css-requires', {
  alias: 'i',
  type: 'string',
  description: 'Directory containing JS files to insert require statements for the CSS files',
  requiresArg: true
}).implies('insert-css-requires', 'source-root').option('ignore', {
  alias: 'x',
  type: 'string',
  description: 'Pattern of files to ignore. Be sure to provide a string',
  requiresArg: true
}).alias('help', 'h').alias('version', 'v').strict();

processFiles(argv._, {
  outDir: argv['out-dir'],
  sourceMaps: argv['source-maps'],
  sourceRoot: argv['source-root'],
  insertCssRequires: argv['insert-css-requires'],
  configFile: argv.config,
  ignore: argv.ignore
});

function processFiles(files, options) {
  let count = 0;
  const resolvedFiles = files.reduce((acc, pattern) => [...acc, ..._glob.default.sync(pattern, {
    absolute: true,
    ignore: options.ignore
  })], []);
  resolvedFiles.forEach(filename => {
    const outputFilename = resolveOutputFilename(filename, options.outDir);
    const {
      cssText,
      sourceMap,
      cssSourceMapText
    } = (0, _transform.default)(_fs.default.readFileSync(filename).toString(), {
      filename,
      outputFilename,
      pluginOptions: {
        configFile: options.configFile
      }
    });

    if (cssText) {
      _mkdirp.default.sync(_path.default.dirname(outputFilename));

      const cssContent = options.sourceMaps && sourceMap ? `${cssText}\n/*# sourceMappingURL=${outputFilename}.map */` : cssText;

      _fs.default.writeFileSync(outputFilename, cssContent);

      if (options.sourceMaps && sourceMap && typeof cssSourceMapText !== 'undefined') {
        _fs.default.writeFileSync(`${outputFilename}.map`, cssSourceMapText);
      }

      if (options.insertCssRequires && options.sourceRoot) {
        const inputFilename = _path.default.resolve(options.insertCssRequires, _path.default.relative(options.sourceRoot, filename));

        const normalizedInputFilename = resolveRequireInsertionFilename(inputFilename);
        const relativePath = (0, _normalizePath.default)(_path.default.relative(_path.default.dirname(inputFilename), outputFilename));
        const requireStatement = `\nrequire('${relativePath.startsWith('.') ? relativePath : `./${relativePath}`}');`;

        const inputContent = _fs.default.readFileSync(normalizedInputFilename, 'utf-8');

        if (!inputContent.trim().endsWith(requireStatement)) {
          _fs.default.writeFileSync(normalizedInputFilename, `${inputContent}\n${requireStatement}\n`);
        }
      }

      count++;
    }
  }); // eslint-disable-next-line no-console

  console.log(`Successfully extracted ${count} CSS files.`);
}

function resolveRequireInsertionFilename(filename) {
  return filename.replace(/\.tsx?/, '.js');
}

function resolveOutputFilename(filename, outDir) {
  const folderStructure = _path.default.relative(process.cwd(), _path.default.dirname(filename));

  const outputBasename = _path.default.basename(filename).replace(_path.default.extname(filename), '.css');

  return _path.default.join(outDir, folderStructure, outputBasename);
}
//# sourceMappingURL=cli.js.map