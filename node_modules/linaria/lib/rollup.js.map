{"version":3,"sources":["../src/rollup.ts"],"names":["linaria","include","exclude","sourceMap","preprocessor","rest","filter","cssLookup","name","load","id","resolveId","importee","transform","code","result","filename","pluginOptions","cssText","slug","replace","cssSourceMapText","map","Buffer","from","toString","JSON","stringify"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;;;AARA;;;;;AAmBe,SAASA,OAAT,CAAiB;AAC9BC,EAAAA,OAD8B;AAE9BC,EAAAA,OAF8B;AAG9BC,EAAAA,SAH8B;AAI9BC,EAAAA,YAJ8B;AAK9B,KAAGC;AAL2B,IAMP,EANV,EAMc;AAC3B,QAAMC,MAAM,GAAG,qCAAaL,OAAb,EAAsBC,OAAtB,CAAf;AACA,QAAMK,SAAoC,GAAG,EAA7C;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;;AAELC,IAAAA,IAAI,CAACC,EAAD,EAAa;AACf,aAAOH,SAAS,CAACG,EAAD,CAAhB;AACD,KAJI;;AAKL;AACAC,IAAAA,SAAS,CAACC,QAAD,EAAmB;AAC1B,UAAIA,QAAQ,IAAIL,SAAhB,EAA2B,OAAOK,QAAP;AAC5B,KARI;;AASLC,IAAAA,SAAS,CAACC,IAAD,EAAeJ,EAAf,EAA2B;AAClC;AACA,UAAI,CAACJ,MAAM,CAACI,EAAD,CAAP,IAAeA,EAAE,IAAIH,SAAzB,EAAoC;AAEpC,YAAMQ,MAAM,GAAG,wBAAUD,IAAV,EAAgB;AAC7BE,QAAAA,QAAQ,EAAEN,EADmB;AAE7BN,QAAAA,YAF6B;AAG7Ba,QAAAA,aAAa,EAAEZ;AAHc,OAAhB,CAAf;AAMA,UAAI,CAACU,MAAM,CAACG,OAAZ,EAAqB;AAErB,UAAI;AAAEA,QAAAA;AAAF,UAAcH,MAAlB;AAEA,YAAMI,IAAI,GAAG,sBAAQD,OAAR,CAAb;AACA,YAAMF,QAAQ,GAAI,GAAEN,EAAE,CAACU,OAAH,CAAW,OAAX,EAAoB,EAApB,CAAwB,IAAGD,IAAK,MAApD;;AAEA,UAAIhB,SAAS,IAAIY,MAAM,CAACM,gBAAxB,EAA0C;AACxC,cAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAM,CAACM,gBAAnB,EAAqCI,QAArC,CAA8C,QAA9C,CAAZ;AACAP,QAAAA,OAAO,IAAK,qDAAoDI,GAAI,IAApE;AACD;;AAEDf,MAAAA,SAAS,CAACS,QAAD,CAAT,GAAsBE,OAAtB;AAEAH,MAAAA,MAAM,CAACD,IAAP,IAAgB,YAAWY,IAAI,CAACC,SAAL,CAAeX,QAAf,CAAyB,KAApD;AAEA;;AACA,aAAO;AAAEF,QAAAA,IAAI,EAAEC,MAAM,CAACD,IAAf;AAAqBQ,QAAAA,GAAG,EAAEP,MAAM,CAACZ;AAAjC,OAAP;AACD;;AArCI,GAAP;AAuCD","sourcesContent":["/**\n * This file contains a Rollup loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport { createFilter } from 'rollup-pluginutils';\nimport transform from './transform';\nimport slugify from './slugify';\nimport type { Preprocessor } from './types';\nimport type { PluginOptions } from './babel/utils/loadOptions';\n\ntype RollupPluginOptions = {\n  include?: string | string[];\n  exclude?: string | string[];\n  sourceMap?: boolean;\n  preprocessor?: Preprocessor;\n} & Partial<PluginOptions>;\n\nexport default function linaria({\n  include,\n  exclude,\n  sourceMap,\n  preprocessor,\n  ...rest\n}: RollupPluginOptions = {}) {\n  const filter = createFilter(include, exclude);\n  const cssLookup: { [key: string]: string } = {};\n\n  return {\n    name: 'linaria',\n    load(id: string) {\n      return cssLookup[id];\n    },\n    /* eslint-disable-next-line consistent-return */\n    resolveId(importee: string) {\n      if (importee in cssLookup) return importee;\n    },\n    transform(code: string, id: string) {\n      // Do not transform ignored and generated files\n      if (!filter(id) || id in cssLookup) return;\n\n      const result = transform(code, {\n        filename: id,\n        preprocessor,\n        pluginOptions: rest,\n      });\n\n      if (!result.cssText) return;\n\n      let { cssText } = result;\n\n      const slug = slugify(cssText);\n      const filename = `${id.replace(/\\.js$/, '')}_${slug}.css`;\n\n      if (sourceMap && result.cssSourceMapText) {\n        const map = Buffer.from(result.cssSourceMapText).toString('base64');\n        cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n      }\n\n      cssLookup[filename] = cssText;\n\n      result.code += `\\nimport ${JSON.stringify(filename)};\\n`;\n\n      /* eslint-disable-next-line consistent-return */\n      return { code: result.code, map: result.sourceMap };\n    },\n  };\n}\n"],"file":"rollup.js"}