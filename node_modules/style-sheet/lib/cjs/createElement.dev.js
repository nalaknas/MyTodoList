'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function createCreateElement(_ref) {
  var StyleSheet = _ref.StyleSheet,
      StyleResolver = _ref.StyleResolver;
  var stylePropName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'css';
  return function (tag, props) {
    if (props && props[stylePropName]) {
      var styles = props[stylePropName];
      delete props[stylePropName];
      var className = props.className;
      delete props.className;
      var rules = [];

      if (Array.isArray(styles)) {
        rules = styles.reduce(function (rules, rule) {
          if (!rule) {
            return rules;
          }

          if (rule.__styleProp) {
            rules.push(rule.__styleProp);
          } else if (Array.isArray(rule)) {
            rules.push.apply(rules, _toConsumableArray(rule));
          } else {
            rules.push(StyleSheet.create({
              rule: rule
            }).rule);
          }

          return rules;
        }, []);
      } else if (styles.__styleProp) {
        rules.push(styles.__styleProp);
      } else {
        rules.push(StyleSheet.create({
          rule: styles
        }).rule);
      }

      if (className) {
        // className takes precedence over the style prop
        // this allows parent components to style the current one.
        rules.push(/dss[\d.]+_/.test(className) ? className.split(' ') : [className]);
      }

      props.className = StyleResolver.resolve(rules);
    }

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    return React.createElement.apply(React, [tag, props].concat(children));
  };
}

module.exports = createCreateElement;
