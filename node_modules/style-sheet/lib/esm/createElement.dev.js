import React from 'react';

function createCreateElement(_ref) {
  var {
    StyleSheet,
    StyleResolver
  } = _ref;
  var stylePropName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'css';
  return function (tag, props) {
    if (props && props[stylePropName]) {
      var styles = props[stylePropName];
      delete props[stylePropName];
      var className = props.className;
      delete props.className;
      var rules = [];

      if (Array.isArray(styles)) {
        rules = styles.reduce((rules, rule) => {
          if (!rule) {
            return rules;
          }

          if (rule.__styleProp) {
            rules.push(rule.__styleProp);
          } else if (Array.isArray(rule)) {
            rules.push(...rule);
          } else {
            rules.push(StyleSheet.create({
              rule
            }).rule);
          }

          return rules;
        }, []);
      } else if (styles.__styleProp) {
        rules.push(styles.__styleProp);
      } else {
        rules.push(StyleSheet.create({
          rule: styles
        }).rule);
      }

      if (className) {
        // className takes precedence over the style prop
        // this allows parent components to style the current one.
        rules.push(/dss[\d.]+_/.test(className) ? className.split(' ') : [className]);
      }

      props.className = StyleResolver.resolve(rules);
    }

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    return React.createElement(tag, props, ...children);
  };
}

export default createCreateElement;
